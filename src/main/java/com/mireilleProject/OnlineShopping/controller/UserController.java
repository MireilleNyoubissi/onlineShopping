package com.mireilleProject.OnlineShopping.controller;



import com.mireilleProject.OnlineShopping.dto.UserDto;
import com.mireilleProject.OnlineShopping.models.User;
import com.mireilleProject.OnlineShopping.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestBody UserDto userDto) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        System.out.println(userDto);
        User n = new User();
        n.setName(userDto.getName());
        n.setEmail(userDto.getEmail());
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path="/{id}")
    public @ResponseBody Optional<User> getUser(@PathVariable Integer id) {
        // This returns a JSON or XML with the users
        boolean exists = userRepository.existsById(id);
        if(!exists){
            throw new IllegalStateException(id + " doesn't exist");
        }
        return userRepository.findById(id);
    }


    @DeleteMapping(path="/{id}")
    public @ResponseBody String deleteUser(@PathVariable Integer id) {
        boolean exists = userRepository.existsById(id);
        if(!exists){
            throw new IllegalStateException(id + " doesn't exist");
        }
        userRepository.deleteById(id);
        return  "id: " + id + " deleted";
    }

    @PutMapping(path="/{id}")
    public @ResponseBody String updateUser(@PathVariable Integer id, @RequestBody UserDto userDto) {

        Optional<User> optionalUser = userRepository.findById(id);
        if(optionalUser.isEmpty()){
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "User with id" + id + " doesn't exist");
        }
        User user = optionalUser.get();
        user.setName(userDto.getName());
        user.setEmail(userDto.getEmail());
        userRepository.save(user);
        return  "User with id: " + id + " updated";
    }
}